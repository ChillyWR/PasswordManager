services:
  password_manager:
    build: .
    image: password_manager
    ports:
      - "${PM_SERVER_PORT}:${PM_SERVER_PORT}"
    environment:
      PM_SERVER_PORT: ${PM_SERVER_PORT}
      PM_SERVER_SHUTDOWN_TIMEOUT: ${PM_SERVER_SHUTDOWN_TIMEOUT}
      PM_DB_HOST: postgres
      PM_DB_PORT: ${PM_DB_PORT}
      PM_DB_NAME: ${PM_DB_NAME}
      PM_DB_USERNAME: ${PM_DB_USERNAME}
      PM_DB_PASSWORD: ${PM_DB_PASSWORD}
      PM_DB_SSL_MODE: ${PM_DB_SSL_MODE}
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
    container_name: password_manager
    networks:
      - db_network

  postgres:
    image: postgres:16
    healthcheck:
      test: ["CMD", "pg_isready"]
      interval: 5s
      timeout: 5s
      retries: 10
    restart: always
    environment:
      POSTGRES_DB: ${PM_DB_NAME}
      POSTGRES_USER: ${PM_DB_USERNAME}
      POSTGRES_PASSWORD: ${PM_DB_PASSWORD}
    ports:
      - "${PM_DB_PORT}:${PM_DB_PORT}"
    container_name: postgres
    networks:
      - db_network

  migrations:
    image: migrate/migrate:4
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./internal/repo/migrations:/migrations
    command: -path /migrations -database postgres://${PM_DB_USERNAME}:${PM_DB_PASSWORD}@postgres:${PM_DB_PORT}/${PM_DB_NAME}?sslmode=${PM_DB_SSL_MODE} up
    container_name: migrations
    networks:
      - db_network

networks:
  db_network:
