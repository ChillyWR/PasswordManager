// Code generated by MockGen. DO NOT EDIT.
// Source: internal/controller/controller.go
//
// Generated by this command:
//
//	mockgen -package mock -destination internal/mock/controller.go -source=internal/controller/controller.go
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	model "github.com/ChillyWR/PasswordManager/model"
	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockRecordRepository is a mock of RecordRepository interface.
type MockRecordRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRecordRepositoryMockRecorder
}

// MockRecordRepositoryMockRecorder is the mock recorder for MockRecordRepository.
type MockRecordRepositoryMockRecorder struct {
	mock *MockRecordRepository
}

// NewMockRecordRepository creates a new mock instance.
func NewMockRecordRepository(ctrl *gomock.Controller) *MockRecordRepository {
	mock := &MockRecordRepository{ctrl: ctrl}
	mock.recorder = &MockRecordRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRecordRepository) EXPECT() *MockRecordRepositoryMockRecorder {
	return m.recorder
}

// CreateCard mocks base method.
func (m *MockRecordRepository) CreateCard(record *model.CardRecord) (*model.CardRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCard", record)
	ret0, _ := ret[0].(*model.CardRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCard indicates an expected call of CreateCard.
func (mr *MockRecordRepositoryMockRecorder) CreateCard(record any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCard", reflect.TypeOf((*MockRecordRepository)(nil).CreateCard), record)
}

// CreateCredentialRecord mocks base method.
func (m *MockRecordRepository) CreateCredentialRecord(record *model.CredentialRecord) (*model.CredentialRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCredentialRecord", record)
	ret0, _ := ret[0].(*model.CredentialRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCredentialRecord indicates an expected call of CreateCredentialRecord.
func (mr *MockRecordRepositoryMockRecorder) CreateCredentialRecord(record any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCredentialRecord", reflect.TypeOf((*MockRecordRepository)(nil).CreateCredentialRecord), record)
}

// CreateIdentity mocks base method.
func (m *MockRecordRepository) CreateIdentity(record *model.IdentityRecord) (*model.IdentityRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateIdentity", record)
	ret0, _ := ret[0].(*model.IdentityRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateIdentity indicates an expected call of CreateIdentity.
func (mr *MockRecordRepositoryMockRecorder) CreateIdentity(record any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIdentity", reflect.TypeOf((*MockRecordRepository)(nil).CreateIdentity), record)
}

// CreateLogin mocks base method.
func (m *MockRecordRepository) CreateLogin(record *model.LoginRecord) (*model.LoginRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLogin", record)
	ret0, _ := ret[0].(*model.LoginRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLogin indicates an expected call of CreateLogin.
func (mr *MockRecordRepositoryMockRecorder) CreateLogin(record any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLogin", reflect.TypeOf((*MockRecordRepository)(nil).CreateLogin), record)
}

// Delete mocks base method.
func (m *MockRecordRepository) Delete(id uuid.UUID) (*model.CredentialRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(*model.CredentialRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockRecordRepositoryMockRecorder) Delete(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRecordRepository)(nil).Delete), id)
}

// GetAll mocks base method.
func (m *MockRecordRepository) GetAll(userID uuid.UUID) ([]model.CredentialRecord, []model.LoginRecord, []model.CardRecord, []model.IdentityRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", userID)
	ret0, _ := ret[0].([]model.CredentialRecord)
	ret1, _ := ret[1].([]model.LoginRecord)
	ret2, _ := ret[2].([]model.CardRecord)
	ret3, _ := ret[3].([]model.IdentityRecord)
	ret4, _ := ret[4].(error)
	return ret0, ret1, ret2, ret3, ret4
}

// GetAll indicates an expected call of GetAll.
func (mr *MockRecordRepositoryMockRecorder) GetAll(userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockRecordRepository)(nil).GetAll), userID)
}

// GetCard mocks base method.
func (m *MockRecordRepository) GetCard(id uuid.UUID) (*model.CardRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCard", id)
	ret0, _ := ret[0].(*model.CardRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCard indicates an expected call of GetCard.
func (mr *MockRecordRepositoryMockRecorder) GetCard(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCard", reflect.TypeOf((*MockRecordRepository)(nil).GetCard), id)
}

// GetCredentialRecord mocks base method.
func (m *MockRecordRepository) GetCredentialRecord(id uuid.UUID) (*model.CredentialRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCredentialRecord", id)
	ret0, _ := ret[0].(*model.CredentialRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCredentialRecord indicates an expected call of GetCredentialRecord.
func (mr *MockRecordRepositoryMockRecorder) GetCredentialRecord(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCredentialRecord", reflect.TypeOf((*MockRecordRepository)(nil).GetCredentialRecord), id)
}

// GetIdentity mocks base method.
func (m *MockRecordRepository) GetIdentity(id uuid.UUID) (*model.IdentityRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIdentity", id)
	ret0, _ := ret[0].(*model.IdentityRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIdentity indicates an expected call of GetIdentity.
func (mr *MockRecordRepositoryMockRecorder) GetIdentity(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIdentity", reflect.TypeOf((*MockRecordRepository)(nil).GetIdentity), id)
}

// GetLogin mocks base method.
func (m *MockRecordRepository) GetLogin(id uuid.UUID) (*model.LoginRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLogin", id)
	ret0, _ := ret[0].(*model.LoginRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLogin indicates an expected call of GetLogin.
func (mr *MockRecordRepositoryMockRecorder) GetLogin(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLogin", reflect.TypeOf((*MockRecordRepository)(nil).GetLogin), id)
}

// UpdateCard mocks base method.
func (m *MockRecordRepository) UpdateCard(record *model.CardRecord) (*model.CardRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCard", record)
	ret0, _ := ret[0].(*model.CardRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCard indicates an expected call of UpdateCard.
func (mr *MockRecordRepositoryMockRecorder) UpdateCard(record any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCard", reflect.TypeOf((*MockRecordRepository)(nil).UpdateCard), record)
}

// UpdateCredentialRecord mocks base method.
func (m *MockRecordRepository) UpdateCredentialRecord(record *model.CredentialRecord) (*model.CredentialRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCredentialRecord", record)
	ret0, _ := ret[0].(*model.CredentialRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCredentialRecord indicates an expected call of UpdateCredentialRecord.
func (mr *MockRecordRepositoryMockRecorder) UpdateCredentialRecord(record any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCredentialRecord", reflect.TypeOf((*MockRecordRepository)(nil).UpdateCredentialRecord), record)
}

// UpdateIdentity mocks base method.
func (m *MockRecordRepository) UpdateIdentity(record *model.IdentityRecord) (*model.IdentityRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateIdentity", record)
	ret0, _ := ret[0].(*model.IdentityRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateIdentity indicates an expected call of UpdateIdentity.
func (mr *MockRecordRepositoryMockRecorder) UpdateIdentity(record any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIdentity", reflect.TypeOf((*MockRecordRepository)(nil).UpdateIdentity), record)
}

// UpdateLogin mocks base method.
func (m *MockRecordRepository) UpdateLogin(record *model.LoginRecord) (*model.LoginRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLogin", record)
	ret0, _ := ret[0].(*model.LoginRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateLogin indicates an expected call of UpdateLogin.
func (mr *MockRecordRepositoryMockRecorder) UpdateLogin(record any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLogin", reflect.TypeOf((*MockRecordRepository)(nil).UpdateLogin), record)
}

// MockUserRepository is a mock of UserRepository interface.
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository.
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance.
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockUserRepository) Create(user *model.User) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", user)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockUserRepositoryMockRecorder) Create(user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserRepository)(nil).Create), user)
}

// Delete mocks base method.
func (m *MockUserRepository) Delete(id uuid.UUID) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockUserRepositoryMockRecorder) Delete(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockUserRepository)(nil).Delete), id)
}

// Get mocks base method.
func (m *MockUserRepository) Get(id uuid.UUID) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", id)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockUserRepositoryMockRecorder) Get(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockUserRepository)(nil).Get), id)
}

// GetAll mocks base method.
func (m *MockUserRepository) GetAll() ([]model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockUserRepositoryMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockUserRepository)(nil).GetAll))
}

// GetByName mocks base method.
func (m *MockUserRepository) GetByName(name string) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByName", name)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByName indicates an expected call of GetByName.
func (mr *MockUserRepositoryMockRecorder) GetByName(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByName", reflect.TypeOf((*MockUserRepository)(nil).GetByName), name)
}

// Update mocks base method.
func (m *MockUserRepository) Update(user *model.User) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", user)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockUserRepositoryMockRecorder) Update(user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUserRepository)(nil).Update), user)
}
